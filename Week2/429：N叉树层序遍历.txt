/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
         List<List<Integer>> res = new ArrayList<>();  
         Queue<Node> qu = new LinkedList<>();
        if(root == null){
            return res;
        } 
        qu.add(root);
        while (!qu.isEmpty()) {
            int count  = qu.size();
            List<Integer> values = new ArrayList<>();
            while(count-- >0 ){
                 Node nextNode = qu.remove();
                 values.add(nextNode.val);
                 for (Node child : nextNode.children) {
                     qu.add(child);
                 }
            }    
            res.add(values);    
        }      
        return res;
    }
}